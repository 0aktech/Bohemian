---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brode.
--- DateTime: 07.02.2022 23:20
---

local _, E = ...
local A = E.EVENTS
local C = E.CORE

E.CORE:RegisterEvent('CRAFT_UPDATE')
E.CORE:RegisterEvent('TRADE_SKILL_UPDATE')


function A:CHAT_MSG_SKILL()
    if IsInGuild() then
        E:ShareProfessions()
    end
end

function A:READY()
    E:RequestProfessionInfo()
end

function A:PROFESSION_INFO_REQUEST(sender)
    E:ShareProfessions(sender)
end

function A:CRAFT(profName, craftName, craftType, numAvailable, icon, desc, cooldown, reagents, link, id, minMade, maxMade, sender)
    local guildName = C:GetGuildName()
    desc = C:decodeBase64(desc)
    local reagents_t = {}
    if not reagents or not sender or not C.guildRoster[sender] then
        return
    end
    reagents = {strsplit("*", reagents)}
    for _, reagent in pairs(reagents) do
        local reagentTexture, reagentCount, playerReagentCount, reagentLink = strsplit("~", reagent)
        table.insert(reagents_t, {
            texture = tonumber(reagentTexture),
            count = tonumber(reagentCount),
            playerCount = tonumber(playerReagentCount),
            link = reagentLink
        })
    end
    if not Crafts[guildName] then
        Crafts[guildName] = {}
    end
    if not Crafts[guildName][sender] then
        Crafts[guildName][sender] = {}
    end
    if not Crafts[guildName][sender][profName] then
        Crafts[guildName][sender][profName] = {}
    end
    Crafts[guildName][sender][profName][craftName] = {
        available = tonumber(numAvailable),
        icon = icon,
        desc = desc,
        type = craftType,
        cooldown = tonumber(cooldown),
        reagents = reagents_t,
        link = link,
        id = tonumber(id),
        min = tonumber(minMade),
        max = tonumber(maxMade),
    }
end


function A:PROFESSION_INFO(payload, sender)
    local spellIds = { strsplit(",", payload) }
    if sender then
        local tmp = {}
        for _, v in ipairs(spellIds) do
            local spellId, spellRank, spellMaxRank = strsplit("-", v)
            spellId = tonumber(spellId)
            spellRank = tonumber(spellRank)
            spellMaxRank = tonumber(spellMaxRank)
            local name, _, icon = GetSpellInfo(spellId)
            local order = E.PROFESSIONS[name]
            if order then
                table.insert(tmp, {name = name, order = order, id = spellId, icon = icon, rank = spellRank, maxRank = spellMaxRank})
            end
        end
        table.sort(tmp, function (a, b) return a.order < b.order end)
        Professions[sender] = tmp
    end
end


function A:CRAFT_UPDATE(...)
    E:ShareCraftsDelayed()
end

function A:TRADE_SKILL_UPDATE(...)
    E:ShareTradeSkillsDelayed()
end

function A:GUILD_FRAME_UPDATE()
    if FriendsFrame.playerStatusFrame then
        C:SwapColumnBetween("GuildFrameColumnHeader6", C.GuildStatusHeaderOrder, C.GuildHeaderOrder)
    else
        C:SwapColumnBetween("GuildFrameColumnHeader6", C.GuildHeaderOrder, C.GuildStatusHeaderOrder)
    end
    E:UpdateDetailFrame()
end


function A:UPDATE_GUILD_MEMBER(i, _, numMembers, fullName)
    local professions
    if i <= numMembers then
        professions = self:GetPlayerProfessions(fullName)
    else
        professions = {}
    end
    E:RenderProfessions("GuildFrameButton"..i.."ProfessionFrame%dProf", fullName, professions)
end

function A:GUILD_MEMBER_COUNT_CHANGED(_, online)
    for player, _ in pairs(online) do
        E:RequestProfessionInfoFrom(player)
    end
end

function A:CRAFT_HISTORY_REQUEST(sender)
    E:ShareAllCraftHistory(sender)
end

function A:SYNC_DONE()
    local players = C:ProcessPlayersForSync(C.onlineChecks)
    for _, player in ipairs(players) do
        C:SendEventTo(player.name, "CRAFT_HISTORY_REQUEST")
    end
end
